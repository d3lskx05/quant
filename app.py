import time
import psutil
import streamlit as st
import numpy as np
from sentence_transformers import SentenceTransformer

# =============================
# üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =============================
MODEL_PATH = "onnx-user-bge-m3"  # –ø–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—å—é

# =============================
# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
# =============================
@st.cache_resource
def load_model():
    return SentenceTransformer(
        MODEL_PATH,
        backend="onnx",
        model_kwargs={"file_name": "model_quantized.onnx"}
    )

model = load_model()
st.success("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

# =============================
# üìù –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# =============================
st.title("–¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ USER-BGE-M3 (INT8)")
user_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")

if st.button("–ü–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥"):
    if user_input.strip():
        # =============================
        # üìä –ó–∞–º–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
        # =============================
        process = psutil.Process()
        start_mem = process.memory_info().rss / 1024 / 1024  # MB
        start_time = time.time()

        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        embedding = model.encode([user_input], normalize_embeddings=True)
        
        elapsed_time = time.time() - start_time
        end_mem = process.memory_info().rss / 1024 / 1024  # MB

        # =============================
        # üìà –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # =============================
        st.write(f"‚è± –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: **{elapsed_time:.4f} —Å–µ–∫**")
        st.write(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: **{end_mem - start_mem:.2f} MB**")
        st.write(f"üìê –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {embedding.shape}")

        st.json({"–ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π —ç–º–±–µ–¥–¥–∏–Ω–≥–∞": embedding[0][:10].tolist()})
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")

# =============================
# üñ•Ô∏è –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∏
# =============================
cpu_usage = psutil.cpu_percent(interval=0.5)
mem_usage = psutil.virtual_memory().percent

st.metric("CPU –∑–∞–≥—Ä—É–∑–∫–∞", f"{cpu_usage}%")
st.metric("RAM –∑–∞–≥—Ä—É–∑–∫–∞", f"{mem_usage}%")
