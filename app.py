import time
import psutil
import streamlit as st
import numpy as np
import gdown
import zipfile
from pathlib import Path
from sentence_transformers import SentenceTransformer

# =============================
# üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å –≤ GDrive
# =============================
MODEL_ID = "1lkrvCPIE1wvffIuCSHGtbEz3Epjx5R36"  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å ID
MODEL_ZIP_URL = f"https://drive.google.com/uc?id={MODEL_ID}"
MODEL_DIR = Path("onnx-user-bge-m3")

# =============================
# üì• –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
# =============================
@st.cache_resource
def download_and_load_model():
    if not MODEL_DIR.exists():
        st.write("üì• –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å —Å Google Drive...")
        gdown.download(MODEL_ZIP_URL, "model.zip", quiet=False)
        with zipfile.ZipFile("model.zip", 'r') as zip_ref:
            zip_ref.extractall(".")
        st.write("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–∞!")

    st.write("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å...")
    model = SentenceTransformer(
        str(MODEL_DIR),
        backend="onnx",
        model_kwargs={"file_name": "model_quantized.onnx"}
    )
    return model

model = download_and_load_model()
st.success("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

# =============================
# üìù –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# =============================
st.title("–¢–µ—Å—Ç –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ USER-BGE-M3 (INT8)")
user_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")

if st.button("–ü–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥"):
    if user_input.strip():
        process = psutil.Process()
        start_mem = process.memory_info().rss / 1024 / 1024
        start_time = time.time()

        embedding = model.encode([user_input], normalize_embeddings=True)

        elapsed_time = time.time() - start_time
        end_mem = process.memory_info().rss / 1024 / 1024

        st.write(f"‚è± –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: **{elapsed_time:.4f} —Å–µ–∫**")
        st.write(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: **{end_mem - start_mem:.2f} MB**")
        st.write(f"üìê –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {embedding.shape}")
        st.json({"–ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π —ç–º–±–µ–¥–¥–∏–Ω–≥–∞": embedding[0][:10].tolist()})
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")

cpu_usage = psutil.cpu_percent(interval=0.5)
mem_usage = psutil.virtual_memory().percent

st.metric("CPU –∑–∞–≥—Ä—É–∑–∫–∞", f"{cpu_usage}%")
st.metric("RAM –∑–∞–≥—Ä—É–∑–∫–∞", f"{mem_usage}%")
